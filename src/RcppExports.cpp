// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calc_metrics_double
Rcpp::List calc_metrics_double(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B, Rcpp::IntegerVector Xtrain_csr_p, Rcpp::IntegerVector Xtrain_csr_i, Rcpp::IntegerVector Xtest_csr_p, Rcpp::IntegerVector Xtest_csr_i, Rcpp::NumericVector Xtest_csr, bool calc_p_at_k, bool calc_tp_at_k, bool calc_r_at_k, bool calc_ap_at_k, bool calc_tap_at_k, bool calc_ndcg_at_k, bool calc_hit_at_k, bool calc_rr_at_k, bool calc_roc_auc, bool calc_pr_auc, int k_metrics, bool break_ties_with_noise, int min_pos_test, int min_items_pool, bool consider_cold_start, bool cumulative, int nthreads, uint64_t seed);
RcppExport SEXP _recometrics_calc_metrics_double(SEXP ASEXP, SEXP BSEXP, SEXP Xtrain_csr_pSEXP, SEXP Xtrain_csr_iSEXP, SEXP Xtest_csr_pSEXP, SEXP Xtest_csr_iSEXP, SEXP Xtest_csrSEXP, SEXP calc_p_at_kSEXP, SEXP calc_tp_at_kSEXP, SEXP calc_r_at_kSEXP, SEXP calc_ap_at_kSEXP, SEXP calc_tap_at_kSEXP, SEXP calc_ndcg_at_kSEXP, SEXP calc_hit_at_kSEXP, SEXP calc_rr_at_kSEXP, SEXP calc_roc_aucSEXP, SEXP calc_pr_aucSEXP, SEXP k_metricsSEXP, SEXP break_ties_with_noiseSEXP, SEXP min_pos_testSEXP, SEXP min_items_poolSEXP, SEXP consider_cold_startSEXP, SEXP cumulativeSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtrain_csr_p(Xtrain_csr_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtrain_csr_i(Xtrain_csr_iSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtest_csr_p(Xtest_csr_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtest_csr_i(Xtest_csr_iSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xtest_csr(Xtest_csrSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_p_at_k(calc_p_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_tp_at_k(calc_tp_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_r_at_k(calc_r_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_ap_at_k(calc_ap_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_tap_at_k(calc_tap_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_ndcg_at_k(calc_ndcg_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_hit_at_k(calc_hit_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_rr_at_k(calc_rr_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_roc_auc(calc_roc_aucSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_pr_auc(calc_pr_aucSEXP);
    Rcpp::traits::input_parameter< int >::type k_metrics(k_metricsSEXP);
    Rcpp::traits::input_parameter< bool >::type break_ties_with_noise(break_ties_with_noiseSEXP);
    Rcpp::traits::input_parameter< int >::type min_pos_test(min_pos_testSEXP);
    Rcpp::traits::input_parameter< int >::type min_items_pool(min_items_poolSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_cold_start(consider_cold_startSEXP);
    Rcpp::traits::input_parameter< bool >::type cumulative(cumulativeSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_metrics_double(A, B, Xtrain_csr_p, Xtrain_csr_i, Xtest_csr_p, Xtest_csr_i, Xtest_csr, calc_p_at_k, calc_tp_at_k, calc_r_at_k, calc_ap_at_k, calc_tap_at_k, calc_ndcg_at_k, calc_hit_at_k, calc_rr_at_k, calc_roc_auc, calc_pr_auc, k_metrics, break_ties_with_noise, min_pos_test, min_items_pool, consider_cold_start, cumulative, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// calc_metrics_float
Rcpp::List calc_metrics_float(Rcpp::IntegerMatrix A, Rcpp::IntegerMatrix B, Rcpp::IntegerVector Xtrain_csr_p, Rcpp::IntegerVector Xtrain_csr_i, Rcpp::IntegerVector Xtest_csr_p, Rcpp::IntegerVector Xtest_csr_i, Rcpp::NumericVector Xtest_csr, bool calc_p_at_k, bool calc_tp_at_k, bool calc_r_at_k, bool calc_ap_at_k, bool calc_tap_at_k, bool calc_ndcg_at_k, bool calc_hit_at_k, bool calc_rr_at_k, bool calc_roc_auc, bool calc_pr_auc, int k_metrics, bool break_ties_with_noise, int min_pos_test, int min_items_pool, bool consider_cold_start, bool cumulative, int nthreads, uint64_t seed);
RcppExport SEXP _recometrics_calc_metrics_float(SEXP ASEXP, SEXP BSEXP, SEXP Xtrain_csr_pSEXP, SEXP Xtrain_csr_iSEXP, SEXP Xtest_csr_pSEXP, SEXP Xtest_csr_iSEXP, SEXP Xtest_csrSEXP, SEXP calc_p_at_kSEXP, SEXP calc_tp_at_kSEXP, SEXP calc_r_at_kSEXP, SEXP calc_ap_at_kSEXP, SEXP calc_tap_at_kSEXP, SEXP calc_ndcg_at_kSEXP, SEXP calc_hit_at_kSEXP, SEXP calc_rr_at_kSEXP, SEXP calc_roc_aucSEXP, SEXP calc_pr_aucSEXP, SEXP k_metricsSEXP, SEXP break_ties_with_noiseSEXP, SEXP min_pos_testSEXP, SEXP min_items_poolSEXP, SEXP consider_cold_startSEXP, SEXP cumulativeSEXP, SEXP nthreadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtrain_csr_p(Xtrain_csr_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtrain_csr_i(Xtrain_csr_iSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtest_csr_p(Xtest_csr_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xtest_csr_i(Xtest_csr_iSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xtest_csr(Xtest_csrSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_p_at_k(calc_p_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_tp_at_k(calc_tp_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_r_at_k(calc_r_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_ap_at_k(calc_ap_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_tap_at_k(calc_tap_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_ndcg_at_k(calc_ndcg_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_hit_at_k(calc_hit_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_rr_at_k(calc_rr_at_kSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_roc_auc(calc_roc_aucSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_pr_auc(calc_pr_aucSEXP);
    Rcpp::traits::input_parameter< int >::type k_metrics(k_metricsSEXP);
    Rcpp::traits::input_parameter< bool >::type break_ties_with_noise(break_ties_with_noiseSEXP);
    Rcpp::traits::input_parameter< int >::type min_pos_test(min_pos_testSEXP);
    Rcpp::traits::input_parameter< int >::type min_items_pool(min_items_poolSEXP);
    Rcpp::traits::input_parameter< bool >::type consider_cold_start(consider_cold_startSEXP);
    Rcpp::traits::input_parameter< bool >::type cumulative(cumulativeSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_metrics_float(A, B, Xtrain_csr_p, Xtrain_csr_i, Xtest_csr_p, Xtest_csr_i, Xtest_csr, calc_p_at_k, calc_tp_at_k, calc_r_at_k, calc_ap_at_k, calc_tap_at_k, calc_ndcg_at_k, calc_hit_at_k, calc_rr_at_k, calc_roc_auc, calc_pr_auc, k_metrics, break_ties_with_noise, min_pos_test, min_items_pool, consider_cold_start, cumulative, nthreads, seed));
    return rcpp_result_gen;
END_RCPP
}
// split_csr_selected_users
Rcpp::List split_csr_selected_users(Rcpp::IntegerVector X_csr_p, Rcpp::IntegerVector X_csr_i, Rcpp::NumericVector X_csr, int ncols, const double test_fraction, uint64_t seed);
RcppExport SEXP _recometrics_split_csr_selected_users(SEXP X_csr_pSEXP, SEXP X_csr_iSEXP, SEXP X_csrSEXP, SEXP ncolsSEXP, SEXP test_fractionSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_p(X_csr_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_i(X_csr_iSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr(X_csrSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< const double >::type test_fraction(test_fractionSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(split_csr_selected_users(X_csr_p, X_csr_i, X_csr, ncols, test_fraction, seed));
    return rcpp_result_gen;
END_RCPP
}
// split_csr_separated_users
Rcpp::List split_csr_separated_users(Rcpp::IntegerVector X_csr_p, Rcpp::IntegerVector X_csr_i, Rcpp::NumericVector X_csr, const int32_t ncols, const int32_t n_users_test, const double test_fraction, const bool consider_cold_start, const int32_t min_items_pool, const int32_t min_pos_test, const bool separated, uint64_t seed);
RcppExport SEXP _recometrics_split_csr_separated_users(SEXP X_csr_pSEXP, SEXP X_csr_iSEXP, SEXP X_csrSEXP, SEXP ncolsSEXP, SEXP n_users_testSEXP, SEXP test_fractionSEXP, SEXP consider_cold_startSEXP, SEXP min_items_poolSEXP, SEXP min_pos_testSEXP, SEXP separatedSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_p(X_csr_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_i(X_csr_iSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr(X_csrSEXP);
    Rcpp::traits::input_parameter< const int32_t >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< const int32_t >::type n_users_test(n_users_testSEXP);
    Rcpp::traits::input_parameter< const double >::type test_fraction(test_fractionSEXP);
    Rcpp::traits::input_parameter< const bool >::type consider_cold_start(consider_cold_startSEXP);
    Rcpp::traits::input_parameter< const int32_t >::type min_items_pool(min_items_poolSEXP);
    Rcpp::traits::input_parameter< const int32_t >::type min_pos_test(min_pos_testSEXP);
    Rcpp::traits::input_parameter< const bool >::type separated(separatedSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(split_csr_separated_users(X_csr_p, X_csr_i, X_csr, ncols, n_users_test, test_fraction, consider_cold_start, min_items_pool, min_pos_test, separated, seed));
    return rcpp_result_gen;
END_RCPP
}
// C_NAN_to_R_NA
void C_NAN_to_R_NA(SEXP vec);
RcppExport SEXP _recometrics_C_NAN_to_R_NA(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    C_NAN_to_R_NA(vec);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_recometrics_calc_metrics_double", (DL_FUNC) &_recometrics_calc_metrics_double, 25},
    {"_recometrics_calc_metrics_float", (DL_FUNC) &_recometrics_calc_metrics_float, 25},
    {"_recometrics_split_csr_selected_users", (DL_FUNC) &_recometrics_split_csr_selected_users, 6},
    {"_recometrics_split_csr_separated_users", (DL_FUNC) &_recometrics_split_csr_separated_users, 11},
    {"_recometrics_C_NAN_to_R_NA", (DL_FUNC) &_recometrics_C_NAN_to_R_NA, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_recometrics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
